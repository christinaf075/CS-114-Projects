def distance(x1:float, y1:float, x2:float, y2:float) -> float:
    """Return the  distance between the points (x1, y1) and (x2, y2)."""
    xdiff = x2 - x1
    ydiff = y2 - y1
    return math.sqrt(xdiff**2 + ydiff**2)
def disrupts_first(x: float, y: float, ax: float, ay: float, ar: float, bx: float, by: float, br: float) -> bool:
    """Calculate the distance between the point (x, y) and the centre of the circle (ax, ay) and between (x,y) and (bx,by)
    , the centre of another circle, to compare it with radiuses ar and br to ensure (x,y) is ar units within the first circle
    but br or greater units beyond the second circle."""
    circle1 = distance(x, y, ax, ay)
    circle2 = distance(x, y, bx, by)
    if circle1 > ar:
        return False
    elif circle1 <= ar:
        if circle2 <= br:
            return False
        else:
            return True 

check.expect("A", disrupts_first(2.0, 3.0, 5.0, 5.0, 3.0, 7.0, 6.0, 2.0), False)
check.expect("B", disrupts_first(4.0, 3.0, 5.0, 5.0, 3.0, 7.0, 6.0, 2.0), True)
check.expect("C", disrupts_first(7.0, 4.0, 5.0, 5.0, 3.0, 7.0, 6.0, 2.0), False)
check.expect("D", disrupts_first(7.0, 7.0, 5.0, 5.0, 3.0, 7.0, 6.0, 2.0), False)
check.expect("E", disrupts_first(8.0, 7.0, 5.0, 5.0, 3.0, 7.0, 6.0, 2.0), False)
check.expect("F", disrupts_first(5.0, 8.0, 5.0, 5.0, 3.0, 7.0, 6.0, 2.0), True)
check.expect("G", disrupts_first(5.1, 5.1, 7.0, 6.0, 1.5, 7.0, 8.0, 2.5), False)
check.expect("H", disrupts_first(7.0, 5.2, 7.0, 6.0, 1.5, 7.0, 8.0, 2.5), True)
check.expect("I", disrupts_first(7.0, 5.6, 7.0, 6.0, 1.5, 7.0, 8.0, 2.5), False)
check.expect("J", disrupts_first(8.0, 5.0, 7.0, 6.0, 1.5, 7.0, 8.0, 2.5), True)
check.within("distance_test_1", distance(3.0, 4.0, 8.0, 6.0), 5.3851, 0.0001)
check.within("distance_test_2", distance(11.3, 5.0, 2.7, 3.1), 8.8073, 0.0001)
check.expect("disrupttest1", disrupts_first(2.2, 7.9, 3.0, 4.0, 5.0, 4.0, 9.0, 3.0), False)
check.expect("disrupttest2", disrupts_first(5.0, 3.0, 3.3, 4.2, 1.3, 3.3, 4.2, 1.3), False)
check.expect("disrupttest3", disrupts_first(9.0, 17.3, 10.1, 4.1, 22.4, 5.6, 3.3, 1.0), True)
